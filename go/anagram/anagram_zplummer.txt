package anagram

import (
	"strings"
)

var primeMap = map[rune]int{
	'a': 2, 'b': 3, 'c': 5, 'd': 7,
	'e': 11, 'f': 13, 'g': 17, 'h': 19,
	'i': 23, 'j': 29, 'k': 31, 'l': 37,
	'm': 41, 'n': 43, 'o': 47, 'p': 53,
	'q': 59, 'r': 61, 's': 67, 't': 71,
	'u': 73, 'v': 79, 'w': 83, 'x': 89,
	'y': 97, 'z': 101,
}

//Detect returns anagrams of a subject from the candidates
func Detect(subject string, candidates []string) (anagrams []string) {
	subject = strings.ToLower(subject)
	subjectProduct := 1
	subjectRunes := []rune(subject)
	for _, r := range subjectRunes {
		subjectProduct = subjectProduct * primeMap[r]
	}
	for _, word := range candidates {
		word := strings.ToLower(word)
		if len(subject) == len(word) && subject != word {
			wordProduct := 1
			wordRunes := []rune(word)
			for _, r := range wordRunes {
				wordProduct = wordProduct * primeMap[r]
			}
			if wordProduct == subjectProduct {
				anagrams = append(anagrams, word)
			}
		}
	}
	return anagrams
}
